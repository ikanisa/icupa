- key: quote.search
  description: Search partner inventory and return priced options for hotels and activities.
  endpoint: https://{project_ref}.supabase.co/functions/v1/bff-quote
  method: POST
  auth: user_jwt
  required:
    - destination
    - start_date
    - end_date
    - party
  input_schema: |
    type: object
    required: [destination, start_date, end_date, party]
    properties:
      destination: { type: string }
      start_date: { type: string, format: date }
      end_date: { type: string, format: date }
      party:
        type: object
        required: [adults]
        properties:
          adults: { type: integer, minimum: 1 }
          children: { type: integer, minimum: 0 }
      budget_hint: { type: string, enum: [value, balanced, premium] }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      items:
        type: array
        items:
          type: object
          required: [id, name, price_cents, currency]
          properties:
            id: { type: string }
            name: { type: string }
            price_cents: { type: integer }
            currency: { type: string }
            supplier: { type: string }
            expires_at: { type: string, format: date-time }
  idempotency:
    key_field: request_id
  rate_limit:
    calls_per_minute: 6
- key: checkout.intent
  description: Create or update a Stripe Payment Intent for the selected itinerary.
  endpoint: https://{project_ref}.supabase.co/functions/v1/bff-checkout
  method: POST
  auth: user_jwt
  required:
    - quote_id
    - amount_cents
    - currency
    - idempotency_key
  input_schema: |
    type: object
    required: [quote_id, amount_cents, currency]
    properties:
      quote_id: { type: string }
      amount_cents: { type: integer, minimum: 0 }
      currency: { type: string }
      idempotency_key: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      payment_intent_id: { type: string }
      client_secret: { type: string }
  idempotency:
    key_field: idempotency_key
  rate_limit:
    calls_per_minute: 4
- key: webhook.stripe
  description: Reconcile Stripe webhook payloads or trigger manual status polling.
  endpoint: https://{project_ref}.supabase.co/functions/v1/stripe-webhook
  method: POST
  auth: service_role
  input_schema: |
    type: object
    properties:
      event_type: { type: string }
      payload: { type: object }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
  rate_limit:
    calls_per_minute: 20
- key: ops.bookings
  description: Retrieve bookings dashboard data or fixtures for offline analysis.
  endpoint: https://{project_ref}.supabase.co/functions/v1/ops-bookings
  method: GET
  auth: service_role
  input_schema: |
    type: object
    properties:
      from: { type: string, format: date }
      to: { type: string, format: date }
      supplier: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      data: { type: array, items: { type: object } }
  rate_limit:
    calls_per_minute: 10
- key: ops.exceptions
  description: Inspect or triage exception queue items for supplier follow-up.
  endpoint: https://{project_ref}.supabase.co/functions/v1/ops-exceptions
  method: GET
  auth: service_role
  input_schema: |
    type: object
    properties:
      status: { type: string, enum: [open, retrying, resolved] }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      data: { type: array, items: { type: object } }
  rate_limit:
    calls_per_minute: 10
- key: ops.refund
  description: Submit a refund request for operator review (mock flow).
  endpoint: https://{project_ref}.supabase.co/functions/v1/ops-refund
  method: POST
  auth: service_role
  required:
    - itinerary_id
    - amount_cents
    - reason
  input_schema: |
    type: object
    required: [itinerary_id, amount_cents, reason]
    properties:
      itinerary_id: { type: string, format: uuid }
      amount_cents: { type: integer, minimum: 1 }
      reason: { type: string, minLength: 1, maxLength: 200 }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      request_id: { type: string }
  rate_limit:
    calls_per_minute: 3
- key: groups.create_escrow
  description: Create a new split-pay escrow for a traveler group.
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-create-escrow
  method: POST
  auth: user_jwt
  required:
    - group_id
    - target_cents
    - min_members
    - deadline
  input_schema: |
    type: object
    required: [group_id, target_cents, min_members, deadline]
    properties:
      group_id: { type: string, format: uuid }
      itinerary_id: { type: string, format: uuid }
      currency: { type: string, default: USD }
      target_cents: { type: integer, minimum: 100 }
      min_members: { type: integer, minimum: 1 }
      deadline: { type: string, format: date-time }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      escrow_id: { type: string }
      status: { type: string }
  rate_limit:
    calls_per_minute: 6
- key: groups.join
  description: Join an existing group as a member.
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-join
  method: POST
  auth: user_jwt
  required:
    - group_id
  input_schema: |
    type: object
    required: [group_id]
    properties:
      group_id: { type: string, format: uuid }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      member_id: { type: string }
      status: { type: string }
  rate_limit:
    calls_per_minute: 10
- key: groups.contribute
  description: Record a contribution into an escrow with payment linkage.
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-contribute
  method: POST
  auth: user_jwt
  required:
    - escrow_id
    - amount_cents
    - currency
  input_schema: |
    type: object
    required: [escrow_id, amount_cents, currency]
    properties:
      escrow_id: { type: string, format: uuid }
      member_id: { type: string, format: uuid }
      amount_cents: { type: integer, minimum: 100 }
      currency: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      contribution_id: { type: string }
      escrow_status: { type: string }
  rate_limit:
    calls_per_minute: 10
- key: groups.payout_now
  description: Trigger a manual payout evaluation for a specific escrow.
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-ops-payout-now
  method: POST
  auth: service_role
  required:
    - escrow_id
  input_schema: |
    type: object
    required: [escrow_id]
    properties:
      escrow_id: { type: string, format: uuid }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      payout_id: { type: string }
      payout_status: { type: string }
      total_cents: { type: integer }
  rate_limit:
    calls_per_minute: 5
- key: groups.payouts_report
  description: Generate payout reconciliation summary for a date window.
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-payouts-report
  method: GET
  auth: service_role
  input_schema: |
    type: object
    properties:
      from: { type: string, format: date-time }
      to: { type: string, format: date-time }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      counts: { type: array, items: { type: object } }
      recent: { type: array, items: { type: object } }
  rate_limit:
    calls_per_minute: 3
- key: permits.request
  description: Submit a traveler permit request for review.
  endpoint: https://{project_ref}.supabase.co/functions/v1/permits-request
  method: POST
  auth: user_jwt
  required:
    - park
    - visit_date
    - pax_count
  input_schema: |
    type: object
    required: [park, visit_date, pax_count]
    properties:
      park: { type: string }
      visit_date: { type: string, format: date }
      pax_count: { type: integer, minimum: 1 }
      note: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      request_id: { type: string }
      status: { type: string }
  rate_limit:
    calls_per_minute: 5
- key: permits.ops_approve
  description: Approve a pending permit with operator persona.
  endpoint: https://{project_ref}.supabase.co/functions/v1/permits-ops-approve
  method: POST
  auth: service_role
  required:
    - request_id
  input_schema: |
    type: object
    required: [request_id]
    properties:
      request_id: { type: string, format: uuid }
      note: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      status: { type: string }
  rate_limit:
    calls_per_minute: 3
- key: permits.ops_reject
  description: Reject a pending permit with operator context.
  endpoint: https://{project_ref}.supabase.co/functions/v1/permits-ops-reject
  method: POST
  auth: service_role
  required:
    - request_id
    - note
  input_schema: |
    type: object
    required: [request_id, note]
    properties:
      request_id: { type: string, format: uuid }
      note: { type: string, minLength: 1 }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      status: { type: string }
  rate_limit:
    calls_per_minute: 3
- key: map.route
  description: Stub: calculate multi-leg route with travel times and daylight warnings.
  endpoint: https://{project_ref}.supabase.co/functions/v1/map-route
  method: POST
  auth: service_role
  required:
    - origin
    - destination
  input_schema: |
    type: object
    required: [origin, destination]
    properties:
      origin: { type: string }
      destination: { type: string }
      departure_time: { type: string, format: date-time }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      legs: { type: array, items: { type: object } }
  implementation_status: planned
  # implemented stub handler in supabase/functions/map-route/index.ts
  rate_limit:
    calls_per_minute: 30
- key: map.nearby
  description: Stub: fetch nearby points of interest filtered by category and safety rating.
  endpoint: https://{project_ref}.supabase.co/functions/v1/map-nearby
  method: POST
  auth: service_role
  required:
    - location
    - category
  input_schema: |
    type: object
    required: [location, category]
    properties:
      location: { type: object, properties: { lat: { type: number }, lng: { type: number } } }
      category: { type: string }
      radius_meters: { type: integer }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      results: { type: array, items: { type: object } }
  implementation_status: planned
  # implemented stub handler in supabase/functions/map-nearby/index.ts
  rate_limit:
    calls_per_minute: 30
- key: notify.whatsapp_send
  description: Stub: send templated or free-form WhatsApp messages via Business API.
  endpoint: https://{project_ref}.supabase.co/functions/v1/wa-send
  method: POST
  auth: service_role
  required:
    - to
    - template
  input_schema: |
    type: object
    required: [to, template]
    properties:
      to: { type: string }
      template: { type: string }
      variables: { type: object }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      message_id: { type: string }
  implementation_status: planned
  # Calls proxy to wa-send; see supabase/functions/wa-send/index.ts
  rate_limit:
    calls_per_minute: 60
- key: agent.log_goal
  description: Record conversational goals for analytics; returns ack payload.
  endpoint: https://{project_ref}.supabase.co/functions/v1/agent-log-goal
  method: POST
  auth: service_role
  input_schema: |
    type: object
    properties:
      goal: { type: string }
      user_wa: { type: string }
      message: { type: string }
      request_id: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      logged: { type: boolean }
      goal: { type: string }
      user_wa: { type: string }
  implementation_status: experimental
  rate_limit:
    calls_per_minute: 120
- key: inventory.search
  description: Search live inventory with cache-first fallback fixtures.
  endpoint: https://{project_ref}.supabase.co/functions/v1/inventory-search
  method: POST
  auth: anon
  required:
    - destination
    - startDate
    - endDate
    - party
  input_schema: |
    type: object
    required: [destination, startDate, endDate, party]
    properties:
      destination: { type: string }
      startDate: { type: string, format: date }
      endDate: { type: string, format: date }
      party:
        type: object
        required: [adults]
        properties:
          adults: { type: integer, minimum: 1 }
          children: { type: integer, minimum: 0 }
      budgetHint: { type: string, enum: [value, balanced, premium] }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      cacheHit: { type: boolean }
      items: { type: array, items: { type: object } }
  rate_limit:
    calls_per_minute: 10
- key: inventory.quote
  description: Fetch quote details for a previously selected inventory item.
  endpoint: https://{project_ref}.supabase.co/functions/v1/inventory-quote
  method: POST
  auth: anon
  required:
    - quoteId
  input_schema: |
    type: object
    required: [quoteId]
    properties:
      quoteId: { type: string }
      locale: { type: string, enum: [en, rw] }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      quote: { type: object }
  rate_limit:
    calls_per_minute: 12
- key: inventory.hold
  description: Create a 15-minute hold on inventory selections.
  endpoint: https://{project_ref}.supabase.co/functions/v1/inventory-hold
  method: POST
  auth: user_jwt
  required:
    - supplier_hotel_id
    - plan_id
    - check_in
    - check_out
    - pax
    - idempotency_key
  input_schema: |
    type: object
    required: [supplier_hotel_id, plan_id, check_in, check_out, pax, idempotency_key]
    properties:
      supplier_hotel_id: { type: string }
      plan_id: { type: string }
      check_in: { type: string, format: date }
      check_out: { type: string, format: date }
      pax:
        type: object
        required: [adults]
        properties:
          adults: { type: integer, minimum: 1 }
          children: { type: integer, minimum: 0 }
      idempotency_key: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      hold_ref: { type: string }
      expires_at: { type: string, format: date-time }
      request_id: { type: string }
      source: { type: string }
      idempotency_key: { type: string }
  rate_limit:
    calls_per_minute: 6
- key: air.price.watch
  description: Register fare change alerts for air itineraries.
  endpoint: https://{project_ref}.supabase.co/functions/v1/air-price-watch
  method: POST
  auth: user_jwt
  required:
    - origin
    - destination
    - departure_date
    - seats
    - cabin
    - traveler_name
    - contact_email
  input_schema: |
    type: object
    required: [origin, destination, departure_date, seats, cabin, traveler_name, contact_email]
    properties:
      origin: { type: string, pattern: "^[A-Z]{3}$" }
      destination: { type: string, pattern: "^[A-Z]{3}$" }
      departure_date: { type: string, format: date }
      return_date: { type: string, format: date }
      seats: { type: integer, minimum: 1, maximum: 9 }
      cabin: { type: string, enum: [economy, premium_economy, business] }
      target_price_cents: { type: integer, minimum: 1 }
      traveler_name: { type: string }
      contact_email: { type: string, format: email }
      itinerary_id: { type: string, format: uuid }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      watch_id: { type: string }
      request_id: { type: string }
      submitted_at: { type: string, format: date-time }
  rate_limit:
    calls_per_minute: 8
- key: groups.create
  description: Create a split-pay escrow for a traveler group.
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-create-escrow
  method: POST
  auth: user_jwt
  required:
    - itineraryId
    - name
    - targetAmountCents
    - currency
    - deadline
  input_schema: |
    type: object
    required: [itineraryId, name, targetAmountCents, currency, deadline]
    properties:
      itineraryId: { type: string, format: uuid }
      name: { type: string }
      targetAmountCents: { type: integer }
      currency: { type: string, minLength: 3, maxLength: 3 }
      deadline: { type: string, format: date-time }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      escrow_id: { type: string, format: uuid }
  rate_limit:
    calls_per_minute: 4
- key: groups.join
  description: Join an existing escrow via invite code.
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-join
  method: POST
  auth: user_jwt
  required:
    - escrowId
    - inviteCode
  input_schema: |
    type: object
    required: [escrowId, inviteCode]
    properties:
      escrowId: { type: string, format: uuid }
      inviteCode: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      member_id: { type: string, format: uuid }
  rate_limit:
    calls_per_minute: 10
- key: groups.contribute
  description: Record a contribution toward an escrow with idempotent ledger entry.
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-contribute
  method: POST
  auth: user_jwt
  required:
    - escrowId
    - amountCents
    - currency
    - idempotencyKey
  input_schema: |
    type: object
    required: [escrowId, amountCents, currency, idempotencyKey]
    properties:
      escrowId: { type: string, format: uuid }
      amountCents: { type: integer }
      currency: { type: string, minLength: 3, maxLength: 3 }
      idempotencyKey: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      contribution_id: { type: string, format: uuid }
  rate_limit:
    calls_per_minute: 8
- key: notify.whatsapp
  description: Compose a safety advisory card and deliver via WhatsApp (fetches map-route warnings when needed).
  endpoint: https://{project_ref}.supabase.co/functions/v1/notify-whatsapp
  method: POST
  auth: service_role
  required:
    - to
  input_schema: |
    type: object
    required: [to]
    properties:
      to: { type: string }
      session_id: { type: string }
      user_wa: { type: string }
      route:
        type: object
        properties:
          origin: { type: string }
          destination: { type: string }
          departure_time: { type: string, format: date-time }
      warnings:
        type: array
        items:
          type: object
          required: [code, severity, summary, detail]
          properties:
            code: { type: string }
            severity: { type: string, enum: [info, watch, alert] }
            summary: { type: string }
            detail: { type: string }
            tags:
              type: array
              items: { type: string }
            advisories:
              type: array
              items:
                type: object
                required: [code, audience, headline, detail]
                properties:
                  code: { type: string }
                  audience: { type: string, enum: [traveler, ops, safety] }
                  headline: { type: string }
                  detail: { type: string }
                  actions:
                    type: array
                    items: { type: string }
                  effective_from: { type: string, format: date-time }
                  effective_to: { type: string, format: date-time }
                  tags:
                    type: array
                    items: { type: string }
      advisories:
        type: array
        items:
          type: object
          required: [code, audience, headline, detail]
          properties:
            code: { type: string }
            audience: { type: string, enum: [traveler, ops, safety] }
            headline: { type: string }
            detail: { type: string }
            actions:
              type: array
              items: { type: string }
            effective_from: { type: string, format: date-time }
            effective_to: { type: string, format: date-time }
            tags:
              type: array
              items: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      warnings:
        type: array
        items: { type: string }
      message_id: { type: string }
  rate_limit:
    calls_per_minute: 60
- key: payout.now
  description: Trigger immediate payout for met escrows (mock unless service role context).
  endpoint: https://{project_ref}.supabase.co/functions/v1/groups-ops-payout-now
  method: POST
  auth: service_role
  required:
    - escrowId
  input_schema: |
    type: object
    required: [escrowId]
    properties:
      escrowId: { type: string, format: uuid }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      payout_id: { type: string }
  rate_limit:
    calls_per_minute: 3
- key: notify.push_subscribe
  description: Capture a Web Push subscription and tag segments for notifications.
  endpoint: https://{project_ref}.supabase.co/functions/v1/push-subscribe
  method: POST
  auth: anon
  input_schema: |
    type: object
    required: [endpoint, keys]
    properties:
      endpoint: { type: string }
      keys:
        type: object
        required: [p256dh, auth]
        properties:
          p256dh: { type: string }
          auth: { type: string }
      tags: { type: array, items: { type: string } }
      profile_id: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      subscription_id: { type: string }
      request_id: { type: string }
  implementation_status: mock
  rate_limit:
    calls_per_minute: 240
- key: notify.push_send
  description: Send push notification payloads to tagged subscriptions with delivery telemetry.
  endpoint: https://{project_ref}.supabase.co/functions/v1/push-send
  method: POST
  auth: user
  input_schema: |
    type: object
    required: [title, body]
    properties:
      title: { type: string }
      body: { type: string }
      audience:
        oneOf:
          - type: string
          - type: array
            items: { type: string }
          - type: object
            properties:
              tags: { type: array, items: { type: string } }
      data: { type: object }
      dry_run: { type: boolean }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      deliveries: { type: array, items: { type: object } }
      request_id: { type: string }
  implementation_status: mock
  rate_limit:
    calls_per_minute: 120
- key: support.sos_contacts
  description: Fetch cached SOS contacts with offline fixtures and log follow-up actions.
  endpoint: https://{project_ref}.supabase.co/functions/v1/sos-contacts
  method: GET
  auth: anon
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      contacts: { type: array, items: { type: object } }
      request_id: { type: string }
  implementation_status: mock
  rate_limit:
    calls_per_minute: 120
- key: support.sos_action
  description: Record SOS follow-up actions (call, share, note) for analytics with fixtures.
  endpoint: https://{project_ref}.supabase.co/functions/v1/sos-contacts
  method: POST
  auth: anon
  input_schema: |
    type: object
    required: [contact_id, action]
    properties:
      contact_id: { type: string }
      action: { type: string }
      note: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      contact_id: { type: string }
      action: { type: string }
      request_id: { type: string }
  implementation_status: mock
  rate_limit:
    calls_per_minute: 120
- key: wallet.trip_recap
  description: Generate a recap email/template preview for a completed itinerary.
  endpoint: https://{project_ref}.supabase.co/functions/v1/trip-recap
  method: POST
  auth: anon
  input_schema: |
    type: object
    required: [itinerary_id]
    properties:
      itinerary_id: { type: string }
      email: { type: string }
      locale: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      recap: { type: object }
      request_id: { type: string }
  implementation_status: mock
  rate_limit:
    calls_per_minute: 60
- key: chat.voice_session
  description: Start a concierge voice session with loopback transcript playback.
  endpoint: https://{project_ref}.supabase.co/functions/v1/voice-session
  method: POST
  auth: anon
  input_schema: |
    type: object
    properties:
      itinerary_id: { type: string }
      language: { type: string }
      prompt: { type: string }
      loopback: { type: boolean }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      session: { type: object }
      request_id: { type: string }
  implementation_status: mock
  rate_limit:
    calls_per_minute: 180
- key: itinerary.assemble
  description: Assemble a draft itinerary and persist line items via booking RPCs.
  endpoint: https://{project_ref}.supabase.co/functions/v1/itinerary-assemble
  method: POST
  auth: service_role
  required:
    - userId
    - items
  input_schema: |
    type: object
    required: [userId, items]
    properties:
      userId: { type: string, format: uuid }
      currency: { type: string, minLength: 3, maxLength: 3 }
      notes: { type: string }
      items:
        type: array
        minItems: 1
        items:
          type: object
          required: [itemType, priceCents]
          properties:
            itemType: { type: string, enum: [hotel, tour, transfer, permit, other] }
            supplierRef: { type: string }
            startAt: { type: string, format: date-time }
            endAt: { type: string, format: date-time }
            priceCents: { type: integer, minimum: 0 }
            currency: { type: string, minLength: 3, maxLength: 3 }
            pax: { type: array, items: { type: object } }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      request_id: { type: string }
      result:
        type: object
        properties:
          itinerary_id: { type: string, format: uuid }
          item_ids:
            type: array
            items: { type: string, format: uuid }
          total_cents: { type: integer }
          currency: { type: string }
  implementation_status: experimental
  rate_limit:
    calls_per_minute: 12
- key: supplier.match
  description: Rank suppliers and traveler cohorts against an intent embedding using pgvector.
  endpoint: https://{project_ref}.supabase.co/functions/v1/supplier-match
  method: POST
  auth: service_role
  required:
    - embedding_or_traveler
  input_schema: |
    type: object
    properties:
      travelerId: { type: string, format: uuid }
      embedding:
        type: array
        items: { type: number }
      limit: { type: integer, minimum: 1, maximum: 50 }
    anyOf:
      - required: [travelerId]
      - required: [embedding]
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      request_id: { type: string }
      source: { type: string, enum: [embedding, traveler] }
      suppliers:
        type: array
        items:
          type: object
          properties:
            supplier_id: { type: string, format: uuid }
            supplier_name: { type: string, nullable: true }
            score: { type: number }
            metadata: { type: object }
      travelers:
        type: array
        items:
          type: object
          properties:
            traveler_id: { type: string, format: uuid, nullable: true }
            score: { type: number }
            metadata: { type: object }
  implementation_status: experimental
  rate_limit:
    calls_per_minute: 20
- key: reservation.handle
  description: Upsert a reservation row for itinerary items and supplier confirmations.
  endpoint: https://{project_ref}.supabase.co/functions/v1/reservation-handle
  method: POST
  auth: service_role
  required:
    - itineraryId
  input_schema: |
    type: object
    required: [itineraryId]
    properties:
      itineraryId: { type: string, format: uuid }
      itemId: { type: string, format: uuid }
      supplierRef: { type: string }
      supplierId: { type: string, format: uuid }
      confirmationCode: { type: string }
      status: { type: string, enum: [pending, confirmed, cancelled, failed] }
      metadata: { type: object }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      request_id: { type: string }
      reservation_id: { type: string, format: uuid }
      status: { type: string }
  implementation_status: experimental
  rate_limit:
    calls_per_minute: 20
- key: chat.voice_call_initiate
  description: Initiate a concierge voice call session via mock bridge.
  endpoint: https://{project_ref}.supabase.co/functions/v1/voice-call-initiate
  method: POST
  auth: service_role
  input_schema: |
    type: object
    properties:
      thread_id: { type: string }
      traveler_name: { type: string }
      traveler_phone: { type: string }
      locale: { type: string, enum: [en, rw] }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      request_id: { type: string }
      call:
        type: object
        properties:
          call_id: { type: string }
          thread_id: { type: string }
          status: { type: string }
          dialer_url: { type: string }
          expires_at: { type: string, format: date-time }
          locale: { type: string }
          participant: { type: object }
  implementation_status: mock
  rate_limit:
    calls_per_minute: 60
- key: chat.voice_call_summarize
  description: Produce a call summary and compliance log for prior voice sessions.
  endpoint: https://{project_ref}.supabase.co/functions/v1/voice-call-summarize
  method: POST
  auth: service_role
  input_schema: |
    type: object
    properties:
      call_id: { type: string }
      thread_id: { type: string }
      transcript:
        type: array
        items:
          type: object
          properties:
            speaker: { type: string }
            text: { type: string }
            timestamp: { type: string }
  output_schema: |
    type: object
    properties:
      ok: { type: boolean }
      request_id: { type: string }
      summary:
        type: object
        properties:
          call_id: { type: string }
          headline: { type: string }
          sentiment: { type: string }
          highlights: { type: array, items: { type: string } }
          next_steps: { type: array, items: { type: string } }
          duration_seconds: { type: number }
          transcript_turns: { type: integer }
      thread_entry: { type: object }
  implementation_status: mock
  rate_limit:
    calls_per_minute: 90
