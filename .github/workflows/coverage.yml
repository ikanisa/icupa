name: Test Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'
          run_install: false
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run tests with coverage
        run: pnpm test --coverage
        env:
          VITE_SUPABASE_URL: https://placeholder.supabase.co
          VITE_SUPABASE_ANON_KEY: placeholder-key
      
      - name: Generate coverage report
        run: |
          # Create coverage summary
          if [ -f coverage/coverage-summary.json ]; then
            LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
            
            echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
            
            # Save for coverage gate
            echo "lines=$LINES" >> $GITHUB_OUTPUT
            echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT
            echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
            echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          fi
        id: coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: icupa-coverage
          fail_ci_if_error: false
        continue-on-error: true
      
      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read coverage summary
            if (!fs.existsSync('coverage/coverage-summary.json')) {
              console.log('No coverage summary found');
              return;
            }
            
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const lines = coverage.total.lines.pct;
            const statements = coverage.total.statements.pct;
            const functions = coverage.total.functions.pct;
            const branches = coverage.total.branches.pct;
            
            // Determine emoji based on coverage
            const getEmoji = (pct) => {
              if (pct >= 80) return '✅';
              if (pct >= 60) return '⚠️';
              return '❌';
            };
            
            const body = `## Test Coverage Report
            
            | Metric | Coverage | Status |
            |--------|----------|--------|
            | Lines | ${lines.toFixed(2)}% | ${getEmoji(lines)} |
            | Statements | ${statements.toFixed(2)}% | ${getEmoji(statements)} |
            | Functions | ${functions.toFixed(2)}% | ${getEmoji(functions)} |
            | Branches | ${branches.toFixed(2)}% | ${getEmoji(branches)} |
            
            **Target:** 80% coverage for all metrics
            
            ${lines < 80 ? '⚠️ Coverage is below target threshold.' : '✅ Coverage meets target threshold!'}
            `;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Coverage Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
  
  coverage-gate:
    name: Coverage Gate
    needs: coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      
      - name: Check coverage threshold
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            LINES=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
            
            # Define threshold (can be made configurable)
            THRESHOLD=60  # Starting at 60%, aiming for 80%
            
            echo "Current line coverage: ${LINES}%"
            echo "Required threshold: ${THRESHOLD}%"
            
            # Use bc for floating point comparison
            if (( $(echo "$LINES < $THRESHOLD" | bc -l) )); then
              echo "::error::Coverage ${LINES}% is below threshold ${THRESHOLD}%"
              echo "❌ Coverage gate failed" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "✅ Coverage gate passed" >> $GITHUB_STEP_SUMMARY
              echo "Coverage ${LINES}% meets threshold ${THRESHOLD}%"
            fi
          else
            echo "::warning::No coverage summary found, skipping gate"
          fi
